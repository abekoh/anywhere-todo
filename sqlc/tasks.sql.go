// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: tasks.sql

package sqlc

import (
	"context"
	"database/sql"
)

const insertTask = `-- name: InsertTask :exec
INSERT INTO tasks (task_id)
VALUES (?)
`

func (q *Queries) InsertTask(ctx context.Context, taskID string) error {
	_, err := q.db.ExecContext(ctx, insertTask, taskID)
	return err
}

const insertTaskLog = `-- name: InsertTaskLog :exec
INSERT INTO task_logs (task_id, task_log_id, title, detail, done, deadline)
VALUES (?, ?, ?, ?, ?, ?)
`

type InsertTaskLogParams struct {
	TaskID    string
	TaskLogID string
	Title     string
	Detail    sql.NullString
	Done      int64
	Deadline  sql.NullTime
}

func (q *Queries) InsertTaskLog(ctx context.Context, arg InsertTaskLogParams) error {
	_, err := q.db.ExecContext(ctx, insertTaskLog,
		arg.TaskID,
		arg.TaskLogID,
		arg.Title,
		arg.Detail,
		arg.Done,
		arg.Deadline,
	)
	return err
}

const selectLatestTaskLog = `-- name: SelectLatestTaskLog :one
SELECT tl.task_log_id, tl.task_id, tl.title, tl.detail, tl.done, tl.deadline, tl.created_at
FROM task_logs tl
         JOIN (SELECT task_log_id, RANK() OVER (PARTITION BY task_id ORDER BY task_log_id desc) AS rnk
               FROM task_logs) ltl USING (task_log_id)
WHERE tl.task_id = ?
  AND ltl.rnk = 1
`

func (q *Queries) SelectLatestTaskLog(ctx context.Context, taskID string) (TaskLog, error) {
	row := q.db.QueryRowContext(ctx, selectLatestTaskLog, taskID)
	var i TaskLog
	err := row.Scan(
		&i.TaskLogID,
		&i.TaskID,
		&i.Title,
		&i.Detail,
		&i.Done,
		&i.Deadline,
		&i.CreatedAt,
	)
	return i, err
}

const selectLatestTaskLogs = `-- name: SelectLatestTaskLogs :many
SELECT tl.task_log_id, tl.task_id, tl.title, tl.detail, tl.done, tl.deadline, tl.created_at
FROM task_logs tl
         JOIN (SELECT task_log_id, RANK() OVER (PARTITION BY task_id ORDER BY task_log_id desc) AS rnk
               FROM task_logs) ltl USING (task_log_id)
WHERE ltl.rnk = 1
`

func (q *Queries) SelectLatestTaskLogs(ctx context.Context) ([]TaskLog, error) {
	rows, err := q.db.QueryContext(ctx, selectLatestTaskLogs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TaskLog
	for rows.Next() {
		var i TaskLog
		if err := rows.Scan(
			&i.TaskLogID,
			&i.TaskID,
			&i.Title,
			&i.Detail,
			&i.Done,
			&i.Deadline,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
